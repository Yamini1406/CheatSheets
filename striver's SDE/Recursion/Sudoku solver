https://leetcode.com/problems/sudoku-solver/

SOLUTION:

class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    public static boolean solve(char[][] board) {
        for(int i=0;i<board.length;i++) {
            for(int j=0;j<board[0].length;j++) {
                
                if(board[i][j]=='.') {
                    for(char c='1';c<='9';c++) {
                        if(isValid(board,i,j,c)){
                            board[i][j] = c;
                            if(solve(board)==true) return true;//don't check for next ele...coz we need to find only one soln'
                            else board[i][j] = '.'; //If we don't fit the char,, remove it
                        }
                    }
                    //during recursiove calling,,if the board didn't fit from 1-9 return false,,,and backtrack by removing the previous move
                    return false;
                }
            }
        }
        //If soln is found,,,,finally true is returned and the board is filled completely and we don't have any '.'...so return true
        return true;
    }

    public static boolean isValid(char[][] board, int row, int col, char c) {
        for(int i=0;i<9;i++) {
            if(board[i][col]==c) return false;
            if(board[row][i]==c) return false;
            //now....to check in which square it belongs tooo...we do 3*(row/3) and the i%3 since only 3 ele can be there in a row in a square...ex:If 4 is given it takes us to the next row...check for theose smaller squares
            if(board[3*(row/3)+(i/3)][3*(col/3)+(i%3)]==c) return false;
        }
        return true;
    }
}

TC: O(9(n ^ 2))
