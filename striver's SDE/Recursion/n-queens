https://leetcode.com/problems/n-queens/description/

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9

SOLUTION
---------
To check left diagonal for every col nd row do (col+row) we get the same number, for right diagonal,,,,, do(n-1)+(row+col),,, if you use (row-col) then you have to deal in -ve indexes: This is called HASHING
There is intuition to (n-1+col-row) as well, for every element of any matrix row-col and similarly col-row uniquely identifies the principal diagonal that element belongs to. In the worst case col can be 0 
and row n-1 so we get -(n-1) , now this wouldn't be a problem if we were using map data structure but since we are using array we simply add (n-1) to the difference so that it starts from 0 and ends at index n-1+(n-1-0) = 2n-2 
which is a total of 2n-1 elements. Map can have -ve key values but array can't have -ve index values

TC: n*n(vector length) + n*n!

DRAW AND SEE TO UNDERSTAND

To write main function for arraylist see THIS: https://takeuforward.org/data-structure/n-queen-problem-return-all-distinct-solutions-to-the-n-queens-puzzle/

class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char board[][] = new char[n][n];
        for(int i=0;i<n;i++) {
            for(int j=0;j<n;j++){
                board[i][j] = '.';
            }
        }
        //I'm checking column-wise,,,if placed in a col,, we move to next col'
        int leftRow[] = new int[n];
        int upperDiagonal[] = new int[2*n-1];
        int lowerDiagonal[] = new int[2*n-1];
        solve(n, ans, board, leftRow, upperDiagonal, lowerDiagonal, 0);
        return ans;
    }
    public static void solve(int n, List<List<String>> ans, char[][] board,int[] leftRow, int[] upperDiagonal, int[] lowerDiagonal, int col) {
        if(col==board.length) {
            ans.add(construct(board));
            return;
        }
        for(int row = 0; row < board.length; row++) {
            if(leftRow[row] == 0 && lowerDiagonal[row+col] == 0 && upperDiagonal[(n-1)+(col-row)] == 0) {
                board[row][col] = 'Q';
                leftRow[row] = 1;
                lowerDiagonal[row+col] = 1;
                upperDiagonal[n-1+col-row] = 1;
                
                solve(n,ans,board,leftRow,upperDiagonal,lowerDiagonal,col+1);

                board[row][col] = '.';
                leftRow[row] = 0;
                lowerDiagonal[row+col] = 0;
                upperDiagonal[n-1+col-row] = 0;

            }
        }
    }

    public static List<String> construct(char[][] board) {
        List<String> res = new ArrayList<>();
        for(int i=0;i<board.length;i++) {
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
}


