https://leetcode.com/problems/permutations/description/

Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
Example 2:

Input: nums = [0,1]
Output: [[0,1],[1,0]]
Example 3:

Input: nums = [1]
Output: [[1]]
 

Constraints:

1 <= nums.length <= 6
-10 <= nums[i] <= 10
All the integers of nums are unique.

SOLUTION
--------
//we always start from idx 0 and if we want to start combos from different idxes always use a for loop

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        boolean freq[] = new boolean[nums.length];
        func(nums,ans,new ArrayList<>(),freq);
        return ans;
    }
    public static void func(int[] nums, List<List<Integer>> ans, List<Integer> ds, boolean[] freq) {
        if(ds.size() == nums.length) {
            ans.add(new ArrayList<>(ds));
            return;
        }
        for(int i=0;i<nums.length;i++) {
            if(!freq[i]) {
                freq[i] = true;
                ds.add(nums[i]);
                func(nums,ans,ds,freq);
                freq[i] = false;
                ds.remove(ds.size()-1);
            }
        }
    }

}
TC: O(N!)*N
SC: O(N)

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        //we are modifying the nums array and thus reducing the space complexity without carrying any boolean array
        func(nums,0,ans);
        return ans;
    }
    public static void func(int[] nums, int idx, List<List<Integer>> ans) {
        if(idx == nums.length) {
            List<Integer> ds = new ArrayList<>();
            for(int i=0;i<nums.length;i++) ds.add(nums[i]);
            ans.add(ds);
        }
        for(int i=idx;i<nums.length;i++) {
            swap(i,idx,nums);
            func(nums,idx+1,ans);
            swap(i,idx,nums);
        }
    }
    public static void swap(int i, int j, int[] nums) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

}
SC: O(1)
